test_name: "get user success"

stages:
  - name: create user for get
    request:
      url: "{tavern.env_vars.BASE_URL}/users"
      method: POST
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
      json:
        username: get_user_success
        roles: [EDITOR]
        password: getpass
    response:
      status_code: 201
      json:
        id: !anystr
        username: get_user_success
        roles: [EDITOR]
        active: true
        createdAt: !anystr
        updatedAt: !anystr
        email: null
      save:
        json:
          user_id: id

  - name: get user by id
    request:
      url: "{tavern.env_vars.BASE_URL}/users/{user_id}"
      method: GET
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
    response:
      status_code: 200
      json:
        id: "{user_id}"
        username: get_user_success
        roles: [EDITOR]
        active: true
        createdAt: !anystr
        updatedAt: !anystr
        email: null

---

test_name: "get user unauthorized"

stages:
  - name: request without token
    request:
      url: "{tavern.env_vars.BASE_URL}/users/00000000-0000-0000-0000-000000000000"
      method: GET
    response:
      status_code: 401

---

test_name: "get user forbidden"

stages:
  - name: create viewer user
    request:
      url: "{tavern.env_vars.BASE_URL}/users"
      method: POST
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
      json:
        username: get_user_forbidden
        roles: [VIEWER]
        password: "$2a$10$Om2EuihRx7HkQQH6kGR92e6JrjZKoggTONqqITt4pmi84LmQg0oDO"
    response:
      status_code: 201
      save:
        json:
          viewer_id: id

  - name: login as viewer
    request:
      url: "{tavern.env_vars.BASE_URL}/auth/login"
      method: POST
      json:
        username: get_user_forbidden
        password: viewerpass
    response:
      status_code: 200
      save:
        json:
          viewer_token: accessToken

  - name: get user with viewer token
    request:
      url: "{tavern.env_vars.BASE_URL}/users/{viewer_id}"
      method: GET
      headers:
        Authorization: "Bearer {viewer_token}"
    response:
      status_code: 403

---

test_name: "get user not found"

stages:
  - name: get non-existent user
    request:
      url: "{tavern.env_vars.BASE_URL}/users/00000000-0000-0000-0000-000000000001"
      method: GET
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
    response:
      status_code: 404
