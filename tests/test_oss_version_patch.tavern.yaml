test_name: "update oss version success"

stages:
  - name: create oss
    request:
      url: "{tavern.env_vars.BASE_URL}/oss"
      method: POST
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
      json:
        name: patch-version-oss
    response:
      status_code: 201
      strict: false
      json:
        id: !anystr
      save:
        json:
          oss_id: id

  - name: create version
    request:
      url: "{tavern.env_vars.BASE_URL}/oss/{oss_id}/versions"
      method: POST
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
      json:
        version: "2.3.4"
    response:
      status_code: 201
      strict: false
      json:
        id: !anystr
      save:
        json:
          version_id: id

  - name: patch version
    request:
      url: "{tavern.env_vars.BASE_URL}/oss/{oss_id}/versions/{version_id}"
      method: PATCH
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
      json:
        licenseConcluded: MIT
        modified: true
    response:
      status_code: 200
      strict: false
      json:
        id: "{version_id}"
        ossId: "{oss_id}"
        version: "2.3.4"
        licenseConcluded: MIT
        modified: true
        reviewStatus: draft
        scopeStatus: IN_SCOPE
        createdAt: !anystr
        updatedAt: !anystr

---

test_name: "update oss version forbidden"

stages:
  - name: create viewer user
    request:
      url: "{tavern.env_vars.BASE_URL}/users"
      method: POST
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
      json:
        username: version_patch_viewer
        roles: [VIEWER]
        password: "$2a$10$Om2EuihRx7HkQQH6kGR92e6JrjZKoggTONqqITt4pmi84LmQg0oDO"
    response:
      status_code: 201

  - name: login as viewer
    request:
      url: "{tavern.env_vars.BASE_URL}/auth/login"
      method: POST
      json:
        username: version_patch_viewer
        password: viewerpass
    response:
      status_code: 200
      save:
        json:
          viewer_token: accessToken

  - name: create oss for forbidden
    request:
      url: "{tavern.env_vars.BASE_URL}/oss"
      method: POST
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
      json:
        name: patch-forbidden-oss
    response:
      status_code: 201
      strict: false
      json:
        id: !anystr
      save:
        json:
          oss_id: id

  - name: create version for forbidden
    request:
      url: "{tavern.env_vars.BASE_URL}/oss/{oss_id}/versions"
      method: POST
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
      json:
        version: "0.2.0"
    response:
      status_code: 201
      strict: false
      json:
        id: !anystr
      save:
        json:
          version_id: id

  - name: patch version with viewer
    request:
      url: "{tavern.env_vars.BASE_URL}/oss/{oss_id}/versions/{version_id}"
      method: PATCH
      headers:
        Authorization: "Bearer {viewer_token}"
      json:
        licenseConcluded: Apache-2.0
    response:
      status_code: 403

---

test_name: "update oss version unauthorized"

stages:
  - name: patch without token
    request:
      url: "{tavern.env_vars.BASE_URL}/oss/00000000-0000-0000-0000-000000000000/versions/00000000-0000-0000-0000-000000000000"
      method: PATCH
      json:
        licenseConcluded: BSD-3-Clause
    response:
      status_code: 401

---

test_name: "update oss version not found"
marks: [xfail]

stages:
  - name: patch non-existent version
    request:
      url: "{tavern.env_vars.BASE_URL}/oss/00000000-0000-0000-0000-000000000000/versions/00000000-0000-0000-0000-000000000001"
      method: PATCH
      headers:
        Authorization: "Bearer {tavern.env_vars.TOKEN}"
      json:
        licenseConcluded: GPL-2.0
    response:
      status_code: 404
